{"heading":"BPXI040I PROCESS LIMIT limname HAS REACHED limperc% OF ITS\n          CURRENT CAPACITY OF limtot FOR PID=pid IN JOB name\n          RUNNING IN ADDRESS SPACE asid","followUp":null,"content":"      Explanation\n\n      The z/OS UNIX System Services process limit has reached a critical\n      level. In the message text:\n\n      limname\n          One of the following:\n\n          MAXFILEPROC\n              Maximum number of files which can be opened by one process.\n\n          MAXPROCUSER\n              Maximum number of processes for one UserID. This is unlimited\n              for the superuser ID with UID=0. This is also unlimited for\n              users dubbed with the default OMVS segment. (In this case, the\n              user is dubbed due to a request to use a kernel resource, as\n              is the case with FTP sessions.)\n\n          MAXQUEUEDSIGS\n              Maximum number of signals which can be queued for a single\n              process by a user.\n\n              Note: Signals queued by the system are not subject to the\n              MAXQUEUEDSIGS limit but are included in the user limit. The\n              system uses queued signals for asyncio. When asyncio is being\n              used then up to (MAXQUEUEDSIGS+MAXFILEPROC) signals can be\n              queued by the system to pa process.\n\n          MAXTHREADS\n              Maximum number of threads to be active concurrently for a\n              single process.\n\n          MAXTHREADTASKS\n              Maximum number of thread tasks to be active concurrently for a\n              single process.\n\n          IPCSHMNSEGS\n              Maximum number of shared memory segments attached per address\n              space.\n\n      limperc\n          The percentage value in steps: 85%-90%-95%-100%\n\n          BPXI040I is first issued when a limit reaches 85% and then in 5%\n          increments thereafter. This value can go beyond 100% in certain\n          circumstances. For example, processes blind dubbed with the\n          default OMVS segment.\n\n          This value can go beyond 100% in certain circumstances. For\n          example, processes blind dubbed with the default OMVS segment.\n\n      limtot\n          The absolute current value.\n\n      pid\n          The process ID, in decimal, of the process.\n\n      name\n          The jobname of the process where limit was reached.\n\n      asid\n          The address space ID for the process.\n\n      System action\n\n      The process will continue, but might encounter problems soon.\n\n      Operator response\n\n      None.\n\n      System programmer response\n\n      Consider raising the specified value with a SETOMVS PID=, <LIMITNAME>\n      command.\n\n      The BPXPRMxx parmlib member can be updated for a specific process\n      limit for future IPLs. However this will have effect on the resource\n      limit for all processes, not just the specific process.\n\n      Module\n\n      BPXMSLIM\n\n      Source\n\n      z/OS UNIX System Services kernel (BPX)\n\n      Routing Code\n\n      1\n\n      Descriptor Code\n\n      11","additional":[]}